diff --git a/dispersant_screener/gp.py b/dispersant_screener/gp.py
index a7bd7c5..3a78f93 100644
--- a/dispersant_screener/gp.py
+++ b/dispersant_screener/gp.py
@@ -3,18 +3,32 @@
 Implementing the Gaussian Process Regression models.
 """
 from __future__ import absolute_import
+import GPy

-from sklearn.gaussian_process import GaussianProcessRegressor
-from sklearn.gaussian_process.kernels import RBF

+def build_coregionalized_model(X_train, y_train):
+    NFEAT = X_train.shape[1]
+    K = GPy.kern.Matern32(NFEAT)
+    icm = GPy.util.multioutput.ICM(input_dim=NFEAT, num_outputs=2, kernel=K)
+    m = GPy.models.GPCoregionalizedRegression([X_train, X_train],
+                                              [y_train[:, 0].reshape(-1, 1), y_train[:, 1].reshape(-1, 1)],
+                                              kernel=icm)
+    return m

-def build_virial_model():
-    virial_model = GaussianProcessRegressor(kernel=RBF(), normalize_y=True, n_restarts_optimizer=30)

-    return virial_model
+def build_model(X_train, y_train, index):
+    NFEAT = X_train.shape[1]
+    K = GPy.kern.Matern32(NFEAT)
+    m = GPy.models.GPRegression(X_train, y_train[:, index].reshape(-1, 1), kernel=K)
+    return m


-def build_gibbs_model():
-    gibbs_model = GaussianProcessRegressor(kernel=RBF(), normalize_y=True, n_restarts_optimizer=30)
+def predict(m, X):
+    mu, var = m.predict(X)

-    return gibbs_model
+
+def predict_coregionalized(m, X, index=0):
+    newX = np.hstack([X, index * np.ones_like(X)])
+    mu_c0, var_c0 = m.predict(newX, Y_metadata={'output_index': index * np.ones((newX.shape[0], 1)).astype(int)})
+
+    return mu_c0, var_c0
\ No newline at end of file
diff --git a/dispersant_screener/pal.py b/dispersant_screener/pal.py
index cf5008c..efacf80 100644
--- a/dispersant_screener/pal.py
+++ b/dispersant_screener/pal.py
@@ -469,6 +469,7 @@ def pal(  # pylint: disable=dangerous-default-value, too-many-arguments, too-man
         mus, stds = _update_sampled(mus, stds, sampled, y_input)

         logger.debug('mean array shape: {}, std array shape: {}'.format(mus.shape, stds.shape))
+        logger.debug('mean array mean: {}, mean array std: {}'.format(np.mean(mus), np.std(mus)))

         # get the uncertainity rectangles, sqrt only once here for efficiency
         lows, ups = _get_uncertainity_regions(mus, stds, np.sqrt(beta))
diff --git a/dispersant_screener/utils.py b/dispersant_screener/utils.py
index e69de29..844d798 100644
--- a/dispersant_screener/utils.py
+++ b/dispersant_screener/utils.py
@@ -0,0 +1,54 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+from sklearn import metrics
+import numpy as np
+
+
+def plot_parity(y_pred0, y_true0, var0, y_pred1, y_true1, var1, outname=None):
+    fig, ax = plt.subplots(1, 2)
+
+    ax[0].scatter(y_true0, y_pred0, c=var0, cmap=plt.cm.coolwarm, s=.3)
+    ax[1].scatter(y_true1, y_pred1, c=var1, cmap=plt.cm.coolwarm, s=.3)
+
+    for a in ax:
+        a.spines['left'].set_smart_bounds(True)
+        a.spines['bottom'].set_smart_bounds(True)
+        a.set_xlabel(r'$y_{true}$')
+        lims = [
+            np.min([a.get_xlim(), a.get_ylim()]),  # min of both axes
+            np.max([a.get_xlim(), a.get_ylim()]),  # max of both axes
+        ]
+        a.plot(lims, lims, 'k-', alpha=0.75, zorder=0)
+
+    ax[0].set_ylabel(r'$\hat{y}$')
+    fig.tight_layout()
+
+    if outname is not None:
+        fig.savefig(outname, bbox_inches='tight')
+
+
+def get_metrics(y_true, y_pred):
+    r2 = metrics.r2_score(y_true, y_pred)
+    mae = metrics.mean_absolute_error(y_true, y_pred)
+    max_error = metrics.max_error(y_true, y_pred)
+
+    return {'r2': r2, 'mae': mae, 'max_error': max_error}
+
+
+def get_variance_descriptors(var):
+    return {
+        'max_var': np.max(var),
+        'min_var': np.min(var),
+        'mean_var': np.mean(var),
+        'median_var': np.median(var),
+        'std_var': np.std(var)
+    }
+
+
+def add_postfix_to_keys(d, postfix):
+    d_ = {}
+
+    for k, v in d.items():
+        d_[k + '_' + postfix] = v
+
+    return d_
\ No newline at end of file
diff --git a/notebooks/create_new_features.ipynb b/notebooks/create_new_features.ipynb
index d143777..d132ad4 100644
--- a/notebooks/create_new_features.ipynb
+++ b/notebooks/create_new_features.ipynb
@@ -34,25 +34,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 41,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "smiless_full_random = df_full_random['smiles']"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 42,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "full_random_feat = featurize_many(smiless_full_random)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 43,
+   "execution_count": 55,
    "metadata": {},
    "outputs": [
     {
@@ -76,149 +58,149 @@
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
-       "      <th>head_tail_[W]</th>\n",
-       "      <th>head_tail_[Tr]</th>\n",
-       "      <th>head_tail_[Ta]</th>\n",
-       "      <th>head_tail_[R]</th>\n",
-       "      <th>total_clusters</th>\n",
-       "      <th>num_[W]</th>\n",
-       "      <th>max_[W]</th>\n",
-       "      <th>min_[W]</th>\n",
-       "      <th>mean_[W]</th>\n",
-       "      <th>num_[Tr]</th>\n",
-       "      <th>...</th>\n",
+       "      <th>Unnamed: 0</th>\n",
        "      <th>[W]</th>\n",
-       "      <th>[Tr]</th>\n",
        "      <th>[Ta]</th>\n",
+       "      <th>[Tr]</th>\n",
        "      <th>[R]</th>\n",
-       "      <th>rel_shannon</th>\n",
-       "      <th>length</th>\n",
-       "      <th>total_solvent</th>\n",
-       "      <th>std_solvent</th>\n",
-       "      <th>total_surface</th>\n",
-       "      <th>std_surface</th>\n",
+       "      <th>total_count</th>\n",
+       "      <th>sequence_type</th>\n",
+       "      <th>R_avg_cluster_size</th>\n",
+       "      <th>Ta_avg_cluster_size</th>\n",
+       "      <th>Tr_avg_cluster_size</th>\n",
+       "      <th>...</th>\n",
+       "      <th>max_cluster_size</th>\n",
+       "      <th>R_no_of_cluster</th>\n",
+       "      <th>Ta_no_of_cluster</th>\n",
+       "      <th>Tr_no_of_cluster</th>\n",
+       "      <th>W_no_of_cluster</th>\n",
+       "      <th>R_max_cluster_size</th>\n",
+       "      <th>Ta_max_cluster_size</th>\n",
+       "      <th>Tr_max_cluster_size</th>\n",
+       "      <th>W_max_cluster_size</th>\n",
+       "      <th>smiles</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
        "      <td>0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>16</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>3.000000</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
        "      <td>1</td>\n",
-       "      <td>4</td>\n",
-       "      <td>0.250000</td>\n",
        "      <td>2</td>\n",
+       "      <td>3</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.00</td>\n",
-       "      <td>0.250000</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>16</td>\n",
-       "      <td>480</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>400</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>[W][Ta][Tr][W][W][Ta][Ta][Ta][R][W][Tr][Tr][R]...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
-       "      <td>0</td>\n",
        "      <td>1</td>\n",
-       "      <td>0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>16</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>3.000000</td>\n",
+       "      <td>3.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1</td>\n",
+       "      <td>1</td>\n",
        "      <td>1</td>\n",
-       "      <td>5</td>\n",
-       "      <td>0.400000</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.00</td>\n",
-       "      <td>0.200000</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>16</td>\n",
-       "      <td>480</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>400</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>2</td>\n",
+       "      <td>[R][W][W][R][R][Tr][Tr][Tr][Ta][Ta][Ta][W][W][...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
+       "      <td>2</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>16</td>\n",
+       "      <td>random</td>\n",
+       "      <td>0.0</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>1</td>\n",
-       "      <td>0.000000</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
-       "      <td>0.00</td>\n",
-       "      <td>1.000000</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>16</td>\n",
-       "      <td>480</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>400</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>0</td>\n",
+       "      <td>[Ta][R][Ta][W][Tr][W][Ta][R][Tr][W][Ta][Tr][Tr...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
+       "      <td>3</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>16</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>3.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
-       "      <td>0</td>\n",
        "      <td>1</td>\n",
+       "      <td>0</td>\n",
        "      <td>2</td>\n",
-       "      <td>0.000000</td>\n",
        "      <td>0</td>\n",
+       "      <td>3</td>\n",
        "      <td>0</td>\n",
-       "      <td>0.00</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>16</td>\n",
-       "      <td>480</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>400</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>[W][Ta][R][Ta][Tr][Tr][Tr][W][Ta][W][Tr][R][Ta...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
-       "      <td>0</td>\n",
+       "      <td>4</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>4.0</td>\n",
+       "      <td>16</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>2.000000</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2</td>\n",
+       "      <td>1</td>\n",
        "      <td>1</td>\n",
-       "      <td>0</td>\n",
        "      <td>1</td>\n",
-       "      <td>3</td>\n",
-       "      <td>0.000000</td>\n",
        "      <td>0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
        "      <td>0</td>\n",
-       "      <td>0.00</td>\n",
-       "      <td>0.333333</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.500000</td>\n",
-       "      <td>16</td>\n",
-       "      <td>480</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>400</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>[R][R][Tr][Tr][W][R][Ta][W][R][W][Ta][Tr][Ta][...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
@@ -246,197 +228,241 @@
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3120</th>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>1</td>\n",
-       "      <td>11</td>\n",
-       "      <td>0.181818</td>\n",
+       "      <td>3120</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>48</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>2.000000</td>\n",
+       "      <td>2.5</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>4</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.50</td>\n",
-       "      <td>0.181818</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.358104</td>\n",
-       "      <td>48</td>\n",
-       "      <td>1440</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>1200</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>[R][W][Tr][W][W][Tr][Tr][Tr][Ta][W][W][W][Ta][...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3121</th>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
-       "      <td>0</td>\n",
+       "      <td>3121</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>48</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>2.333333</td>\n",
+       "      <td>3.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1</td>\n",
+       "      <td>3</td>\n",
+       "      <td>1</td>\n",
+       "      <td>2</td>\n",
        "      <td>2</td>\n",
-       "      <td>7</td>\n",
-       "      <td>0.285714</td>\n",
        "      <td>3</td>\n",
        "      <td>3</td>\n",
-       "      <td>3.00</td>\n",
-       "      <td>0.142857</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.358104</td>\n",
-       "      <td>48</td>\n",
-       "      <td>1440</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>1200</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>3</td>\n",
+       "      <td>[R][Ta][Ta][R][Ta][R][W][Tr][W][Ta][R][Tr][W][...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3122</th>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
-       "      <td>9</td>\n",
-       "      <td>0.222222</td>\n",
+       "      <td>3122</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>48</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>2.500000</td>\n",
+       "      <td>2.5</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.00</td>\n",
-       "      <td>0.222222</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.358104</td>\n",
-       "      <td>48</td>\n",
-       "      <td>1440</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>1200</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>3</td>\n",
+       "      <td>2</td>\n",
+       "      <td>[W][W][R][Tr][W][W][Ta][W][R][R][Ta][R][Tr][Ta...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3123</th>\n",
-       "      <td>0</td>\n",
-       "      <td>1</td>\n",
+       "      <td>3123</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>48</td>\n",
+       "      <td>random</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>2.000000</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
        "      <td>1</td>\n",
-       "      <td>0</td>\n",
-       "      <td>9</td>\n",
-       "      <td>0.111111</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.00</td>\n",
-       "      <td>0.333333</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.358104</td>\n",
-       "      <td>48</td>\n",
-       "      <td>1440</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>1200</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>2</td>\n",
+       "      <td>[Tr][Ta][Tr][Tr][R][W][Ta][R][W][R][Tr][W][R][...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3124</th>\n",
-       "      <td>0</td>\n",
-       "      <td>1</td>\n",
-       "      <td>0</td>\n",
+       "      <td>3124</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>12.0</td>\n",
+       "      <td>48</td>\n",
+       "      <td>random</td>\n",
+       "      <td>3.0</td>\n",
+       "      <td>2.000000</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>...</td>\n",
+       "      <td>3</td>\n",
        "      <td>1</td>\n",
-       "      <td>10</td>\n",
-       "      <td>0.400000</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>4</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
-       "      <td>2.25</td>\n",
-       "      <td>0.300000</td>\n",
-       "      <td>...</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.25</td>\n",
-       "      <td>0.358104</td>\n",
-       "      <td>48</td>\n",
-       "      <td>1440</td>\n",
-       "      <td>3.535534</td>\n",
-       "      <td>1200</td>\n",
-       "      <td>5.0</td>\n",
+       "      <td>2</td>\n",
+       "      <td>3</td>\n",
+       "      <td>[Tr][W][Tr][R][Tr][Ta][R][Ta][Tr][Ta][Tr][Tr][...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>3125 rows × 31 columns</p>\n",
+       "<p>3125 rows × 22 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
-       "      head_tail_[W]  head_tail_[Tr]  head_tail_[Ta]  head_tail_[R]  \\\n",
-       "0                 1               0               0              1   \n",
-       "1                 0               1               0              1   \n",
-       "2                 0               0               1              1   \n",
-       "3                 1               0               0              1   \n",
-       "4                 0               1               0              1   \n",
-       "...             ...             ...             ...            ...   \n",
-       "3120              1               0               0              1   \n",
-       "3121              0               0               0              2   \n",
-       "3122              1               0               1              0   \n",
-       "3123              0               1               1              0   \n",
-       "3124              0               1               0              1   \n",
+       "      Unnamed: 0   [W]  [Ta]  [Tr]   [R]  total_count sequence_type  \\\n",
+       "0              0   4.0   4.0   4.0   4.0           16        random   \n",
+       "1              1   4.0   4.0   4.0   4.0           16        random   \n",
+       "2              2   4.0   4.0   4.0   4.0           16        random   \n",
+       "3              3   4.0   4.0   4.0   4.0           16        random   \n",
+       "4              4   4.0   4.0   4.0   4.0           16        random   \n",
+       "...          ...   ...   ...   ...   ...          ...           ...   \n",
+       "3120        3120  12.0  12.0  12.0  12.0           48        random   \n",
+       "3121        3121  12.0  12.0  12.0  12.0           48        random   \n",
+       "3122        3122  12.0  12.0  12.0  12.0           48        random   \n",
+       "3123        3123  12.0  12.0  12.0  12.0           48        random   \n",
+       "3124        3124  12.0  12.0  12.0  12.0           48        random   \n",
+       "\n",
+       "      R_avg_cluster_size  Ta_avg_cluster_size  Tr_avg_cluster_size  ...  \\\n",
+       "0                    2.0             3.000000                  2.0  ...   \n",
+       "1                    2.0             3.000000                  3.0  ...   \n",
+       "2                    0.0             0.000000                  2.0  ...   \n",
+       "3                    2.0             0.000000                  3.0  ...   \n",
+       "4                    2.0             2.000000                  2.0  ...   \n",
+       "...                  ...                  ...                  ...  ...   \n",
+       "3120                 2.0             2.000000                  2.5  ...   \n",
+       "3121                 2.0             2.333333                  3.0  ...   \n",
+       "3122                 2.0             2.500000                  2.5  ...   \n",
+       "3123                 2.0             2.000000                  2.0  ...   \n",
+       "3124                 3.0             2.000000                  2.0  ...   \n",
+       "\n",
+       "      max_cluster_size  R_no_of_cluster  Ta_no_of_cluster  Tr_no_of_cluster  \\\n",
+       "0                    3                1                 1                 1   \n",
+       "1                    3                1                 1                 1   \n",
+       "2                    2                0                 0                 1   \n",
+       "3                    3                1                 0                 1   \n",
+       "4                    2                1                 1                 1   \n",
+       "...                ...              ...               ...               ...   \n",
+       "3120                 3                4                 3                 2   \n",
+       "3121                 3                1                 3                 1   \n",
+       "3122                 3                3                 2                 2   \n",
+       "3123                 2                3                 2                 3   \n",
+       "3124                 3                1                 2                 3   \n",
        "\n",
-       "      total_clusters   num_[W]  max_[W]  min_[W]  mean_[W]  num_[Tr]  ...  \\\n",
-       "0                  4  0.250000        2        2      2.00  0.250000  ...   \n",
-       "1                  5  0.400000        2        2      2.00  0.200000  ...   \n",
-       "2                  1  0.000000        0        0      0.00  1.000000  ...   \n",
-       "3                  2  0.000000        0        0      0.00  0.500000  ...   \n",
-       "4                  3  0.000000        0        0      0.00  0.333333  ...   \n",
-       "...              ...       ...      ...      ...       ...       ...  ...   \n",
-       "3120              11  0.181818        3        2      2.50  0.181818  ...   \n",
-       "3121               7  0.285714        3        3      3.00  0.142857  ...   \n",
-       "3122               9  0.222222        2        2      2.00  0.222222  ...   \n",
-       "3123               9  0.111111        2        2      2.00  0.333333  ...   \n",
-       "3124              10  0.400000        3        2      2.25  0.300000  ...   \n",
+       "      W_no_of_cluster  R_max_cluster_size  Ta_max_cluster_size  \\\n",
+       "0                   1                   2                    3   \n",
+       "1                   2                   2                    3   \n",
+       "2                   0                   0                    0   \n",
+       "3                   0                   2                    0   \n",
+       "4                   0                   2                    2   \n",
+       "...               ...                 ...                  ...   \n",
+       "3120                2                   2                    2   \n",
+       "3121                2                   2                    3   \n",
+       "3122                2                   2                    3   \n",
+       "3123                1                   2                    2   \n",
+       "3124                4                   3                    2   \n",
        "\n",
-       "       [W]  [Tr]  [Ta]   [R]  rel_shannon  length  total_solvent  std_solvent  \\\n",
-       "0     0.25  0.25  0.25  0.25     0.500000      16            480     3.535534   \n",
-       "1     0.25  0.25  0.25  0.25     0.500000      16            480     3.535534   \n",
-       "2     0.25  0.25  0.25  0.25     0.500000      16            480     3.535534   \n",
-       "3     0.25  0.25  0.25  0.25     0.500000      16            480     3.535534   \n",
-       "4     0.25  0.25  0.25  0.25     0.500000      16            480     3.535534   \n",
-       "...    ...   ...   ...   ...          ...     ...            ...          ...   \n",
-       "3120  0.25  0.25  0.25  0.25     0.358104      48           1440     3.535534   \n",
-       "3121  0.25  0.25  0.25  0.25     0.358104      48           1440     3.535534   \n",
-       "3122  0.25  0.25  0.25  0.25     0.358104      48           1440     3.535534   \n",
-       "3123  0.25  0.25  0.25  0.25     0.358104      48           1440     3.535534   \n",
-       "3124  0.25  0.25  0.25  0.25     0.358104      48           1440     3.535534   \n",
+       "      Tr_max_cluster_size  W_max_cluster_size  \\\n",
+       "0                       2                   2   \n",
+       "1                       3                   2   \n",
+       "2                       2                   0   \n",
+       "3                       3                   0   \n",
+       "4                       2                   0   \n",
+       "...                   ...                 ...   \n",
+       "3120                    3                   3   \n",
+       "3121                    3                   3   \n",
+       "3122                    3                   2   \n",
+       "3123                    2                   2   \n",
+       "3124                    2                   3   \n",
        "\n",
-       "      total_surface  std_surface  \n",
-       "0               400          5.0  \n",
-       "1               400          5.0  \n",
-       "2               400          5.0  \n",
-       "3               400          5.0  \n",
-       "4               400          5.0  \n",
-       "...             ...          ...  \n",
-       "3120           1200          5.0  \n",
-       "3121           1200          5.0  \n",
-       "3122           1200          5.0  \n",
-       "3123           1200          5.0  \n",
-       "3124           1200          5.0  \n",
+       "                                                 smiles  \n",
+       "0     [W][Ta][Tr][W][W][Ta][Ta][Ta][R][W][Tr][Tr][R]...  \n",
+       "1     [R][W][W][R][R][Tr][Tr][Tr][Ta][Ta][Ta][W][W][...  \n",
+       "2     [Ta][R][Ta][W][Tr][W][Ta][R][Tr][W][Ta][Tr][Tr...  \n",
+       "3     [W][Ta][R][Ta][Tr][Tr][Tr][W][Ta][W][Tr][R][Ta...  \n",
+       "4     [R][R][Tr][Tr][W][R][Ta][W][R][W][Ta][Tr][Ta][...  \n",
+       "...                                                 ...  \n",
+       "3120  [R][W][Tr][W][W][Tr][Tr][Tr][Ta][W][W][W][Ta][...  \n",
+       "3121  [R][Ta][Ta][R][Ta][R][W][Tr][W][Ta][R][Tr][W][...  \n",
+       "3122  [W][W][R][Tr][W][W][Ta][W][R][R][Ta][R][Tr][Ta...  \n",
+       "3123  [Tr][Ta][Tr][Tr][R][W][Ta][R][W][R][Tr][W][R][...  \n",
+       "3124  [Tr][W][Tr][R][Tr][Ta][R][Ta][Tr][Ta][Tr][Tr][...  \n",
        "\n",
-       "[3125 rows x 31 columns]"
+       "[3125 rows x 22 columns]"
       ]
      },
-     "execution_count": 43,
+     "execution_count": 55,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "full_random_feat"
+    "df_full_random"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 41,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "smiless_full_random = df_full_random['smiles']"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 42,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "full_random_feat = featurize_many(smiless_full_random)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 44,
+   "execution_count": 50,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -445,7 +471,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 45,
+   "execution_count": 51,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -454,7 +480,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 46,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -463,7 +489,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": 53,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -472,7 +498,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 48,
+   "execution_count": 54,
    "metadata": {},
    "outputs": [],
    "source": [
diff --git a/notebooks/feature_importance.ipynb b/notebooks/feature_importance.ipynb
index 6c375a7..d957900 100644
--- a/notebooks/feature_importance.ipynb
+++ b/notebooks/feature_importance.ipynb
@@ -22,45 +22,264 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 1,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
-      "  return f(*args, **kwds)\n"
-     ]
-    },
-    {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'shap'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-2-c9550ef7cd1c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mshap\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'shap'"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import sys \n",
     "import os \n",
     "from pathlib import Path \n",
+    "import numpy as np \n",
     "\n",
     "%load_ext autoreload\n",
     "%autoreload 2\n",
     "\n",
     "import pandas as pd\n",
     "import shap \n",
+    "from xgboost import XGBRegressor\n",
+    "from sklearn.preprocessing import StandardScaler\n",
+    "from sklearn.feature_selection import VarianceThreshold\n",
+    "from sklearn.model_selection import train_test_split\n",
     "\n",
     "import matplotlib.pyplot as plt \n",
     "%matplotlib inline \n",
     "\n",
     "import seaborn as sns\n",
-    "plt.rcParams['font.family'] = 'sans-serif'"
+    "plt.rcParams['font.family'] = 'sans-serif'\n",
+    "\n",
+    "DATADIR = '../data'\n",
+    "TRAIN_SIZE = 0.9"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "feat_names = list(pd.read_csv(os.path.join(DATADIR, 'new_features_full_random.csv')).columns)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "df_full_factorial_feat = pd.read_csv(os.path.join(DATADIR, 'new_features_full_random.csv')).values\n",
+    "a2 = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_virial_large.csv'))['A2_normalized'].values\n",
+    "gibbs = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_deltaG.csv'))['deltaGmin'].values\n",
+    "rg = pd.read_csv(os.path.join(DATADIR, 'rg_results.csv'))['Rg'].values\n",
+    "y = np.hstack([rg.reshape(-1,1), gibbs.reshape(-1,1)])\n",
+    "assert len(df_full_factorial_feat) == len(a2) == len(gibbs) == len(y)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "X_train, X_test, y_train, y_test = train_test_split(df_full_factorial_feat, y, train_size=TRAIN_SIZE)\n",
+    "\n",
+    "vt = VarianceThreshold(0)\n",
+    "X_train = vt.fit_transform(X_train)\n",
+    "X_test = vt.transform(X_test)\n",
+    "\n",
+    "feat_scaler = StandardScaler()\n",
+    "X_train = feat_scaler.fit_transform(X_train)\n",
+    "X_test = feat_scaler.transform(X_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def plot_parity(y_true, y_pred):\n",
+    "    fig, ax = plt.subplots()\n",
+    "    plt.scatter(y_true, y_pred)\n",
+    "    lims = [\n",
+    "    np.min([ax.get_xlim(), ax.get_ylim()]),  # min of both axes\n",
+    "    np.max([ax.get_xlim(), ax.get_ylim()]),  # max of both axes\n",
+    "    ]\n",
+    "    # now plot both limits against eachother\n",
+    "    ax.plot(lims, lims, 'k-', alpha=0.75,  zorder=0)\n",
+    "    ax.spines['left'].set_smart_bounds(True)\n",
+    "    ax.spines['bottom'].set_smart_bounds(True)\n",
+    "    ax.set_xlabel(r'$y_{true}$')\n",
+    "    ax.set_ylabel(r'$\\hat{y}$')\n",
+    "    fig.tight_layout()\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n",
+       "             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n",
+       "             importance_type='gain', interaction_constraints=None,\n",
+       "             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n",
+       "             min_child_weight=1, missing=nan, monotone_constraints=None,\n",
+       "             n_estimators=100, n_jobs=0, num_parallel_tree=1,\n",
+       "             objective='reg:squarederror', random_state=0, reg_alpha=0,\n",
+       "             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=None,\n",
+       "             validate_parameters=False, verbosity=None)"
+      ]
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "xgb = XGBRegressor()\n",
+    "xgb.fit(X_train, y_train[:,1])\n",
+    "\n",
+    "xgb_rg = XGBRegressor()\n",
+    "xgb_rg.fit(X_train, y_train[:,0])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 14,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "predictions = xgb.predict(X_test)\n",
+    "predictions_rg = xgb_rg.predict(X_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n",
+      "\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_parity(predictions, y_test[:,1])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Setting feature_perturbation = \"tree_path_dependent\" because no background data was given.\n"
+     ]
+    }
+   ],
+   "source": [
+    "explainer = shap.TreeExplainer(xgb)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "shap_values = explainer.shap_values(X_train, y_train)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "not enough data in bin #6 for feature max_[W], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #5 for feature mean_[W], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #12 for feature mean_[W], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #14 for feature mean_[W], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #17 for feature mean_[W], so it'll be ignored. Try increasing the number of records to plot.\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 576x684 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "shap.summary_plot(shap_values, X_train, feature_names=feat_names, plot_type='layered_violin')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 15,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "not enough data in bin #5 for feature min_[R], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #11 for feature mean_[R], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #15 for feature mean_[R], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #5 for feature mean_[Ta], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #13 for feature mean_[Ta], so it'll be ignored. Try increasing the number of records to plot.\n",
+      "not enough data in bin #16 for feature mean_[Ta], so it'll be ignored. Try increasing the number of records to plot.\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 576x684 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "explainer_rg = shap.TreeExplainer(xgb_rg)\n",
+    "shap_values_rg = explainer_rg.shap_values(X_train, y_train)\n",
+    "shap.summary_plot(shap_values_rg, X_train, feature_names=feat_names, plot_type='layered_violin')"
    ]
   },
   {
diff --git a/notebooks/gp.ipynb b/notebooks/gp.ipynb
index 3b549d4..dceba61 100644
--- a/notebooks/gp.ipynb
+++ b/notebooks/gp.ipynb
@@ -1260,7 +1260,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.5"
+   "version": "3.7.0"
   }
  },
  "nbformat": 4,
diff --git a/notebooks/gp_with_new_features.ipynb b/notebooks/gp_with_new_features.ipynb
index fc83f30..3dd681d 100644
--- a/notebooks/gp_with_new_features.ipynb
+++ b/notebooks/gp_with_new_features.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 248,
+   "execution_count": 49,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -21,25 +21,26 @@
     "from sklearn.ensemble import GradientBoostingRegressor\n",
     "\n",
     "DATADIR = '../data'\n",
-    "TRAIN_SIZE = 0.9"
+    "TRAIN_SIZE = 0.1"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 262,
+   "execution_count": 50,
    "metadata": {},
    "outputs": [],
    "source": [
     "df_full_factorial_feat = pd.read_csv(os.path.join(DATADIR, 'new_features_full_random.csv')).values\n",
     "a2 = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_virial_large.csv'))['A2_normalized'].values\n",
     "gibbs = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_deltaG.csv'))['deltaGmin'].values\n",
-    "y = np.hstack([a2.reshape(-1,1), gibbs.reshape(-1,1)])\n",
+    "rg = pd.read_csv(os.path.join(DATADIR, 'rg_results.csv'))['Rg'].values\n",
+    "y = np.hstack([rg.reshape(-1,1), gibbs.reshape(-1,1)])\n",
     "assert len(df_full_factorial_feat) == len(a2) == len(gibbs) == len(y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 263,
+   "execution_count": 51,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -56,7 +57,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 264,
+   "execution_count": 52,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -65,7 +66,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 265,
+   "execution_count": 53,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -74,7 +75,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 266,
+   "execution_count": 54,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -83,7 +84,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 267,
+   "execution_count": 55,
    "metadata": {},
    "outputs": [
     {
@@ -95,7 +96,7 @@
        "                         optimizer='fmin_l_bfgs_b', random_state=None)"
       ]
      },
-     "execution_count": 267,
+     "execution_count": 55,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -106,7 +107,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 268,
+   "execution_count": 56,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -116,7 +117,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 269,
+   "execution_count": 57,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -138,7 +139,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 270,
+   "execution_count": 58,
    "metadata": {},
    "outputs": [
     {
@@ -153,7 +154,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -170,7 +171,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 271,
+   "execution_count": 59,
    "metadata": {},
    "outputs": [
     {
@@ -185,7 +186,7 @@
     },
     {
      "data": {
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEYCAYAAAAJeGK1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3de3hU5b328e+PEDSKiqggpwiyUZR6wlSsbXdpKYrQLWitJ0TFA8Ui6otIsdjX2re0aABBRRCopa220qpErBREFNtKocIOB1EQSi0koIhIQUEh4ff+MYMOYZJMJjOz1mTuz3XlYmbWM5PbMXDnWeuZtczdERERCZtGQQcQERGJRwUlIiKhpIISEZFQUkGJiEgoqaBERCSUGgcdIJN69erl27ZtCzqGiIgAy5Yt2+buJ1S33XJsmXlO/ceKiISZmS1z96LqtodyF5+Z9TKztWa23sxGxtl+jJm9YGYrzGy1mQ0MIqeIiKRP6ArKzPKAScDFwOnA1WZ2epVhQ4C33P0soDswzsyaZDSoiIikVegKCjgPWO/uG9x9L/A00LfKGAeOMjMDmgLbgYrMxhQRkXQKY0G1ATbF3C+LPhbrUeA0YDOwCrjD3ffHezEzG2RmS81saZcuXdKRV0RE0iCMBWVxHqu6uOEiYDnQGjgbeNTMjo73Yu4+1d2L3L2ooKAgtUlFRCRtwlhQZUC7mPtticyUYg0EnvOI9cC/gM4ZyiciIhkQxoJ6A+hkZh2iCx+uAmZXGbMR6AFgZi2BU4ENGU0pIiJpFboP6rp7hZndBswD8oAn3H21mQ2Obp8C/D9ghpmtIrJL8Ifurk/giohkkLsTWauWHqErKAB3nwPMqfLYlJjbm4ELM51LRERgx44dTJw4kbPPPpu+fasusk6dUBaUiIiEj7uzYMECHnnkEXbv3s3pp1f9iGpqqaBERKRWH3zwAePHj2fx4sWcfvrpjBgxgpNOOimt31MFJSIi1XJ3XnzxRSZPnkxlZSVDhgzhsssuo1Gj9K+xU0GJiEhcW7Zsobi4mNLSUs455xyGDx9O69atM/b9VVAiInKQ/fv3M2vWLKZNm0ZeXh533XUXffr0SeuKvXhUUCIi8rl///vfFBcXs3r1as4//3yGDRvGCSdUe8mmtFJBiYgIFRUVzJw5kxkzZlBQUMCoUaPo0aNHxmdNsVRQIiI5qKS0nOJ5a9m8Yw8nNG1Mi/cW88nqhXTv3p3bb7+dY489NuiIKigRkVxTUlrOPc+tYs++SgC2flzBB0ecxfe//zVGXtUj4HRfCOO5+EREJI2K5639vJwO8Eb5vPBucLvz4lFBiYjkkE8//ZTyHbvjbtu8Y0+G09RMBSUikiNKS0u58cYbyftsZ9ztrZuF65p5KigRkQZu9+7djB8/nmHDhtGoUSPu6N6egvy8g8YU5Odx90WnBpQwPi2SEBFpwJYsWcK4cePYtm0bV155JQMHDuSwww6jsPCLVXytmxVw90Wn0u+cNkHHPYgKSkSkAdq5cyePPvoo8+fPp3379vz0pz+lc+cvLjze75w2oSukqlRQIiINzGuvvcaECRPYtWsX1113Hddeey35+flBx6ozFZSISAOxfft2JkyYwF//+ldOOeUUxo4dS8eOHYOOlTQVlIhIlnN3XnrpJSZNmsSnn37KoEGDuOKKK8jLy6v9ySGmghIRyWJbt25l3Lhx/OMf/+BLX/oSI0aMoF27dkHHSgkVlIhIFnJ3Zs+ezeOPP467c/vtt9OvX79AT+6aaqEsKDPrBUwE8oDp7j4mzpjuwAQgH9jm7t/IaEgRkYCUl5dTXFzMihUrOPfccxk+fDgnnnhi0LFSLnQFZWZ5wCSgJ1AGvGFms939rZgxzYDHgF7uvtHMWgSTVkQkc/bv388zzzzDE088QePGjRkxYgS9evVqULOmWKErKOA8YL27bwAws6eBvsBbMWOuAZ5z940A7r414ylFRDLo3Xff5YEHHmDNmjVccMEFDBs2jOOOOy7oWGkVxoJqA2yKuV8GdKsy5hQg38wWAkcBE939N/FezMwGAYMACgsLUx5WRCSdKioq+N3vfsdvf/tbjjzySH784x/zzW9+s8HOmmKFsaDivete5X5j4FygB1AA/N3MFrv7O4c80X0qMBWgqKio6uuIiITWO++8wwMPPMCGDRvo0aMHt912G82aNQs6VsaEsaDKgNg1km2BzXHGbHP3T4BPzOwvwFnAIQUlIpJt9u7dy4wZM5g5cybHHnsso0eP5oILLgg6VsaFsaDeADqZWQegHLiKyDGnWM8Dj5pZY6AJkV2AD2U0pYhIGrz55ps8+OCDbNq0id69e3PrrbfStGnToGMFInQF5e4VZnYbMI/IMvMn3H21mQ2Obp/i7m+b2VxgJbCfyFL0N4NLLSJSP3v27GH69OnMmjWLli1bMnbsWM4999ygYwXK3HPnsExRUZEvXbo06BgiIgdZtmwZY8eO5f333+fSSy/l5ptvpqAgXBcPTAczW+buRdVtD90MSkQkV3z88cdMnjyZOXPm0LZtWyZOnMgZZ5wRdKzQUEGJiARg0aJFjB8/no8++oirr76a66+/nsMOOyzoWKGighIRyaAdO3bwyCOP8Morr3DyySfz85//nFNOOSXoWKGkghIRyQB359VXX+Xhhx/mk08+YeDAgVxzzTU0bqx/hqujd0ZEJM0+/PBDxo8fz6JFi+jcuTMjRoygQ4cOQccKPRWUiEiauDtz585l0qRJ7Nu3j1tvvZXLL7+cRo0aBR0tK6igRETS4L333mPcuHEsXbqUs846i7vvvps2bdoEHSurqKBERFLI3Zk1axbTpk3DzLjzzju55JJLcuLkrqmmghIRSdK9Jav4/ZJNVLqTZ8b/dDmW/f/4PatWreK8887jrrvuokULXa4uWSooEZEk3FuyiicXb/z8fqU7Jas+pPme1vxiZB8uvPBCzZrqSQUlIlIHJaXlFM9bS/mOPYduNGPH8Wdw0UUXZT5YA6SCEhFJQElpOaNmreKTvZU1jtufO6c3TTsVlIhILUpKy7nrjyuoTKB98rRbL2W0GF9EpBb3v7A6oXICuLpbu9oHSUI0gxIRqUbsKr3a5Jlxdbd2/KyfzkaeKiooEZEqSkrL+dFzK9m9b3+tYw146Mqz6XeOPoSbaiooEZEY95as4qnFG0l0rUP/8wtVTmmighIRITJruv+F1Xy0e1/Cz7n2/ELt0ksjFZSI5LyS0nLueW4Ve/bVvIT8gDbNCrj7olM1c0ozFZSI5KwaP3RbDc2aMieUy8zNrJeZrTWz9WY2soZxXzazSjO7PJP5RCT7HZg1JVpOZiqnTAvdDMrM8oBJQE+gDHjDzGa7+1txxj0AzMt8ShHJVnWdNRmRhRAqpswLXUEB5wHr3X0DgJk9DfQF3qoybijwLPDlzMYTkWxUUlrOT2avZseexBdBNCvI5yeXdNGxpoCEsaDaAJti7pcB3WIHmFkb4FLgW9RSUGY2CBgEUFhYmNKgIpId+k/7O6//c3vC47UIIhzCWFDxTmRV9SMJE4Afuntlbaezd/epwFSAoqIincZRJIfU9TNNBfl5/OKyM1RMIRHGgioDYk9m1RbYXGVMEfB0tJyOB3qbWYW7l2QmooiEWUlpOXf/cTkJnAjic5o1hU8YC+oNoJOZdQDKgauAa2IHuHuHA7fNbAbwJ5WTiCR6SYxYmjWFV+gKyt0rzOw2Iqvz8oAn3H21mQ2Obp8SaEARCaWqV7hNxLFH5HPf/2gRRFiFrqAA3H0OMKfKY3GLyd1vyEQmEQmvktLyOpfTVzs256lbvpKmRJIKofygrohIokpKy7nrDyvq9Jxrzy9UOWWBUM6gRERqk8znmjRryi4qKBHJKskshACdpigbqaBEJGsksxAiz2DcFbqgYDZSQYlIVigpLecpLYTIKSooEQmtup6iCPS5poZEBSUiodRt9Hze37W3Ts/R55oaFhWUiIRKZNn4cirreOZMLYJoeFRQIhIaye3Sa8QvLjtTs6YGSAUlIoErKS3n/8xcnvBZx0End80FKigRCVTnUXP4tI7787Q6LzeooEQkEMnszgNoeVQTlVOOUEGJSEaVlJYzbOZy6nCpps9pIURuUUGJSMaced9cdn5Wt1MUgYopV6mgRCTtkjlFEUR25y0Z1TMNiSQbqKBEJK2SWQQBKidRQYlImiS7CAK0S08iVFAiknLtR76Y1POOPiyPlff3SnEayVYqKBFJmZ7jF7Ju6ydJPVezJqlKBSUiKZHsrKmxwfpf9ElxGmkIGgUdIB4z62Vma81svZmNjLO9v5mtjH4tMrOzgsgpIpGzjidbTteeX6hykmqFbgZlZnnAJKAnUAa8YWaz3f2tmGH/Ar7h7h+Z2cXAVKBb5tOK5LZki+nwPGPN6N4pTiMNTegKCjgPWO/uGwDM7GmgL/B5Qbn7opjxi4G2GU0okuOSLSbQsSZJXBgLqg2wKeZ+GTXPjm4C/lzdRjMbBAwCKCwsTEU+kZxWn3J6d4x250niwlhQFuexuJ/yM7NvEimor1X3Yu4+lcguQIqKiur+aUERAeC/7nmRiiT/BmnWJMkIY0GVAe1i7rcFNlcdZGZnAtOBi939wwxlE8lJ+lyTBCGMBfUG0MnMOgDlwFXANbEDzKwQeA4Y4O7vZD6iSG7Q7jwJUugKyt0rzOw2YB6QBzzh7qvNbHB0+xTg/wLHAY+ZGUCFuxcFlVmkoanPB25B5SSpYe65c1imqKjIly5dGnQMkVDTCj3JFDNbVtPkInQzKBEJRrfR83l/196kn69Zk6SaCkpEdKxJQkkFJZLDkr1WE0Q+D/IvlZOkkQpKJEdp1iRhp4ISyTH1KSadQ08ySQUlkkM0a5JsooISyQH1KSZdr0mCooISaeA0a5JspYISaaDqU0ygcpLgqaBEGiDNmqQhUEGJNCCaNUlDooISaSA0a5KGRgUlkuU0a5KGSgUlkqX6T/s7r/9ze9LPVzFJ2KmgRLJQfWZNLY9qwpJRPVOYRiQ9VFAiWUS78ySXNAo6gIgkpj7l1KnFkSonyTqaQYmEXH0uiQGaNUn2qlNBmdnLwF3uviJNeUQkhpaOSy6rsaDM7HTgR+5+bfShEcBDZvbv6ONb0h1QJBfpWJNI7cegFgD3Hrjj7v/r7t8C/gTMNbP7zKwg1aHMrJeZrTWz9WY2Ms52M7OHo9tXmlnXVGcQCUp9Z00qJ2koaiuoC4HRsQ+YmQFrgcnAUGCdmQ1IVSAzywMmARcDpwNXR2dysS4GOkW/BkWziGS1bqPna5eeSIwad/G5+yqg/4H7ZvY34GRgNbAYuAFYA9xhZl9390EpyHQesN7dN0S/59NAX+CtmDF9gd+4uwOLzayZmbXSLkfJViomkUPVdRXfYGB1tBhiDTWzt1OUqQ2wKeZ+GdAtgTFtgEMKyswGEZllUVhYmKKIIqmhY00i1atTQbn7mzVsTtXfFIv3rZMYE3nQfSowFaCoqCj5tboiKaZZk0jNUvY5qAO75FKgDGgXc78tsDmJMSKhpFmTSGLC+EHdN4BOZtYBKAeuAq6pMmY2cFv0+FQ34D86/iTZQLMmkcSFrqDcvcLMbgPmAXnAE+6+2swGR7dPAeYAvYH1wG5gYFB5RRKhk7uK1F3oCgrA3ecQKaHYx6bE3HZgSKZziSRDsyaR5ISyoEQagvoUU2OD9b9QOUluU0GJpNi9Jat4cvHGpJ+vWZNIhApKJIXqM2uacOXZ9DunTQrTiGQ3FZRICujy6yKpp4ISqSfNmkTSQwUlkqT/uudFKupxbhLNmkRqpoISSYKWjouknwpKpA56jl/Iuq2fJP18lZNI4lRQIgnSrEkks1RQIrXoMPLF+KfKT8Dhecaa0b1TmkckV6igRGqgWZNIcFRQInHU51jT0YflsfL+XilOJJJ7VFAiVWjWJBIOKiiRqG6j5/P+rr1JPVfHmkRSTwUlgmZNImGkgpKcduZ9c9n5WWVSz732/EJ+1u+MFCcSkQNUUJKzNGsSCTcVlOSc+px5vFOLI5k/rHtqA4lIXCooySnJnuBVxSSSeSooyQn1mTXpkhgiwQhdQZlZc2Am0B54F7jC3T+qMqYd8BvgRGA/MNXdJ2Y2qWSLzqPm8Gll3adNWjouEqxGQQeIYySwwN07AQui96uqAO5y99OA84EhZnZ6BjNKFigpLaf9yBeTKqd3x/RROYkELHQzKKAv0D16+9fAQuCHsQPcfQuwJXp7l5m9DbQB3spYSgm1ZHfpfbVjc5665StpSCQidRXGgmoZLSDcfYuZtahpsJm1B84BllSzfRAwCKCwsDClQSV87i1ZxZOLN9b5edqdJxI+gRSUmb1M5PhRVaPq+DpNgWeBO919Z7wx7j4VmApQVFRUjwt0S5glW0ygD9yKhFUgBeXu365um5m9b2atorOnVsDWasblEymnp9z9uTRFlSyQ7JnHWx7VhCWjeqYhkYikQhh38c0GrgfGRP98vuoAMzPgl8Db7j4+s/EkLJKdNelyGCLZIYyr+MYAPc1sHdAzeh8za21mc6JjvgoMAL5lZsujXzqAkEO6jZ6fVDl1anGkykkkS4RuBuXuHwI94jy+Gegdvf03wDIcTUKgpLScO2cuT+q5OtYkkl1CV1Ai1Um2nFRMItlJBSWhd2/JKp5avJG6LsE8rHEjHvjumTpNkUiWUkFJqCXzgVud2FWkYQjjIgkRIDJzqms5tTyqicpJpIHQDEpCKZmZk05TJNKwqKAkVEpKy/nRcyvZvW9/ws/RLj2RhkkFJaFQUlrO/S+s5qPd+xJ+zhH5jfj5ZVoEIdJQqaAkUMnMmECzJpFcoIKSwCR7SQx9rkkkN6igJBBaBCEitVFBScaVlJbXqZzMoH83zZpEco0KSjLm3pJV/H7JJio9sXNCNCvI5yeXdNEiCJEcpYKStEtmIYSOM4mICkrSqqS0nHueW8WeBMtJ588TkQNUUJJWxfPWsmdfZUJjtQhCRGKpoCSlSkrLKZ63ls079tC6WQHlO/bU+pw2zQq4+6JTNWsSkYOooCRlql4Wo3zHHnCPLMOrho41iUh1VFBSbzWepsgMg0Ou5aSl4yJSGxWU1MsXiyCqP87kRHbjHdjtp915IpIIFZQkraS0nLv+sKLWzzW1aVbA6yO/laFUItJQhO6ChWbW3Mzmm9m66J/H1jA2z8xKzexPmcwoX8ycaisnA+6+6NTMhBKRBiV0BQWMBBa4eydgQfR+de4A3s5IKjlI8bw1tS4fN6D/+YXanSciSQljQfUFfh29/WugX7xBZtYW6ANMz1AuiSorK6P8o5qXjzcryOehK8/WIggRSVoYj0G1dPctAO6+xcxaVDNuAjACOKqmFzOzQcAggMLCwlTmzDmVlZX88Y9/5Fe/+hX5XQayr8mhb32eGeOuOEuzJhGpt0BmUGb2spm9Geerb4LP/w6w1d2X1TbW3ae6e5G7F51wwgn1zp6rNmzYwJAhQ3j88cc577zzuO/SsynIzztoTEF+nspJRFImkBmUu3+7um1m9r6ZtYrOnloBW+MM+ypwiZn1Bg4HjjazJ9392jRFzlkVFRU8+eSTPPXUUzRt2pT77ruPb3zjG5gZTZseddBZI7R8XERSyTzBSx9kipkVAx+6+xgzGwk0d/cRNYzvDgx39+/U9tpFRUW+dOnS1IVt4NasWUNxcTEbNmygR48eDB06lGOOOSboWCLSQJjZMncvqm57GI9BjQH+YGY3ARuB7wGYWWtgurv3DjJcLvjss8+YMWMGM2fOpHnz5owePZoLLrgg6FgikmNCV1Du/iHQI87jm4FDysndFwIL0x4sR6xcuZLi4mLKysro06cPgwcPpmnTpkHHEpEcFLqCkmDs3r2badOmUVJSQqtWrRg3bhxdu3YNOpaI5DAVlLB06VKKi4v54IMP+O53v8vNN9/M4YcfHnQsEclxKqgctmvXLiZPnsyf//xn2rVrxyOPPEKXLl2CjiUiAqigctbf/vY3HnroIXbs2EH//v257rrraNKkSdCxREQ+p4Jq4Kpe4XbI19uy7uXfs3DhQjp27MiYMWPo1KlT0DFFRA6hgmrAql6rqXzHHkY9/xYt3v2A2268kauvvprGjfUjICLhpH+dGrDieWsPOeO4N8qHMy9hwIALA0olIpKYMJ7NXFJk8474Zxzf+nGcS7OLiISMCqqB2rJlC4d7/IJq3awgw2lEROpOBdXA7N+/n2effZaBAwfSfNNfyW908LkWC/LzdIVbEckKOgaVxaqu0Lux6DhKS6axevVqunXrxrBhw1hUvk9nHBeRrBS6s5mnU0M6m3nVFXoAVrmPtlte48fXXUzPnj0xswATiojULBvPZi4JiLtCLy+fitN7c+GFPQNKJSKSOjoGlaWqW6H33s69GU4iIpIeKqgs9Pbbb9Ok4pO427RCT0QaChVUFvnss8947LHHGDJkCG0+XEaTvIO3a4WeiDQkOgaVJZYvX05xcTGbN2/mkksu4fvf/z4vrf1IK/REpMFSQYXc7t27mTJlCi+88AKtW7fmoYce4uyzzwag3zlHqJBEpMFSQYXYkiVLGDduHNu2beN73/seN910E4cddljQsUREMkIFFUI7d+5k0qRJvPTSS5x00klMmjSJ0047LehYIiIZFbqCMrPmwEygPfAucIW7fxRnXDNgOvAlwIEb3f3vmUuaHq+99hoTJkxg165dDBgwgAEDBpCfnx90LBGRjAtdQQEjgQXuPsbMRkbv/zDOuInAXHe/3MyaAEdkMmSqbd++nYkTJ/KXv/yFTp06MXbsWDp27Bh0LBGRwISxoPoC3aO3fw0spEpBmdnRwH8DNwC4+14gKz+h6u7Mnz+fRx99lE8//ZRbbrmFK6+8kry8vNqfLCLSgIWxoFq6+xYAd99iZi3ijDkZ+AD4lZmdBSwD7nD3Qz69amaDgEEAhYWF6UudhK1btzJ+/HiWLFlCly5dGDFiROgyiogEJZCCMrOXgRPjbBqV4Es0BroCQ919iZlNJLIr8MdVB7r7VGAqRE4Wm1zi1HJ3XnjhBR5//HEqKysZOnQo/fr1o1EjfW5aROSAQArK3b9d3TYze9/MWkVnT62ArXGGlQFl7r4kev8ZIgUVeuXl5RQXF7NixQq6du3K8OHDadWqVdCxRERCJ4y7+GYD1wNjon8+X3WAu79nZpvM7FR3Xwv0AN7KbMzExF6z6Zj8/RSse4nmuzYwfPhwevfurUtiiIhUI4wFNQb4g5ndBGwEvgdgZq2B6e7eOzpuKPBUdAXfBmBgEGFrUvWaTTv2NWJX+578oPcp9PnvzgGnExEJt9AVlLt/SGRGVPXxzUDvmPvLgWovdBUGD85dc8g1myrJY8qizQxQQYmI1EhH5dNk3bp11V6zqbrHRUTkCyqoFNu7dy/Tpk1j8ODBumaTiEg9hG4XXzZ78803efDBB9m0aRMXX3wxhV8/l/vnrD9oN5+u2SQikhgVVArs2bOH6dOnM2vWLFq0aEFxcTFFRZHDY4cfXqBrNomIJEEFVU/Lli1j7NixvPfee/Tr149bbrmFI4744rSA/c5po0ISEUmCCipJH3/8MZMnT2bOnDm0bduWiRMncuaZZwYdS0SkwVBBJWHRokWMHz+e7du3c9VVV3HDDTfoQoIiIimmgqqD//znPzzyyCMsWLCADh068LOf/YzOnfV5JhGRdFBBJejVV1/l4Ycf5uOPP+aGG26gf//+NG6st09EJF1y6l/Y448/PunnLl68mJYtWzJu3DhOPvnkFKYSEZF4zD0UV6DIlKT/Y/fs2UOTJk10IUERkRQxs2XuXu0p63JqBlUfBQU6+4OISCbpVEciIhJKKigREQklFZSIiISSCkpEREJJBSUiIqGkghIRkVBSQYmISCipoEREJJRy7YO6Vq8nm80Fkj9fUs2OB7al6bXTIdvyQvZlzra8kH2Zsy0vZF/mw939S9Vsm1vTE3PtVEehZWZLazrlR9hkW17IvszZlheyL3O25YXsy1yfvNrFJyIioaSCEhGRUFJBhcfUoAPUUbblhezLnG15IfsyZ1teyL7MSefVMSgREQklzaBERCSUVFAiIhJKKqiAmFlzM5tvZuuifx5bzbhmZvaMma0xs7fN7CuZzhrNkVDe6Ng8Mys1sz9lMmOcHLVmNrN2ZvZq9L1dbWZ3BJCzl5mtNbP1ZjYyznYzs4ej21eaWddMZ6ySp7a8/aM5V5rZIjM7K4icVTLVmDlm3JfNrNLMLs9kvjg5as1rZt3NbHn05/a1TGeMk6e2n4tjzOwFM1sRzTyw1hd1d30F8AU8CIyM3h4JPFDNuF8DN0dvNwGahTlvdPsw4HfAn8L+HgOtgK7R20cB7wCnZzBjHvBP4OTo/98VVb8/0Bv4M5EPmp8PLAnwPU0k7wXAsdHbFweZN9HMMeNeAeYAl4c5L9AMeAsojN5vEfb3GPjRgb+DwAnAdqBJTa+rGVRw+hIpH6J/9qs6wMyOBv4b+CWAu+919x0ZS3iwWvMCmFlboA8wPUO5alJrZnff4u7/G729C3gbaJOxhHAesN7dN7j7XuBpIrlj9QV+4xGLgWZm1iqDGWPVmtfdF7n7R9G7i4G2Gc5YVSLvMcBQ4FlgaybDxZFI3muA59x9I4C7Z0NmB44yMwOaEimoippeVAUVnJbuvgUi/0gCLeKMORn4APhVdJfZdDM7MpMhYySSF2ACMALYn6lgNUg0MwBm1h44B1iS9mRfaANsirlfxqEFmciYTKlrlpuIzP6CVGtmM2sDXApMyWCu6iTyHp8CHGtmC81smZldl7F08SWS+VHgNGAzsAq4w91r/Hci187Fl1Fm9jJwYpxNoxJ8icZAV2Couy8xs4lEdlX9OEURD1LfvGb2HWCruy8zs+6pzFbD96zve3zgdZoS+e35TnffmYpsiX7rOI9V/exHImMyJeEsZvZNIgX1tbQmql0imScAP3T3ysgv+IFKJG9j4FygB1AA/N3MFrv7O+kOV41EMl8ELAe+BXQE5pvZX2v6+6aCSiN3/3Z128zsfTNr5e5bortr4k3Ry4Aydz/wG/0zRAoqLVKQ96vAJWbWGzgcONrMnnT3a9MUORWZMbN8IuX0lLs/l6ao1SkD2unBQDAAAAL3SURBVMXcb0vkN8y6jsmUhLKY2ZlEdvNe7O4fZihbdRLJXAQ8HS2n44HeZlbh7iWZiXiQRH8mtrn7J8AnZvYX4Cwix1CDkEjmgcAYjxyEWm9m/wI6A/+o7kW1iy84s4Hro7evB56vOsDd3wM2mdmp0Yd6EDkwGoRE8t7j7m3dvT1wFfBKOsspAbVmju4P/yXwtruPz2C2A94AOplZBzNrQuR9m11lzGzguuhqvvOB/xzYdRmAWvOaWSHwHDAgwN/oY9Wa2d07uHv76M/uM8APAionSOxn4nng62bW2MyOALoROX4alEQybyTybxhm1hI4FdhQ46sGufIjl7+A44AFwLron82jj7cG5sSMOxtYCqwESoiujgpr3pjx3Ql+FV+tmYnsfvLo+7s8+tU7wzl7E/nN95/AqOhjg4HB0dsGTIpuXwUUBfy+1pZ3OvBRzPu5NMi8iWSuMnYGAa7iSzQvcDeRX1jfJLJrOtTvcfTv3UvRn+E3gWtre02d6khEREJJu/hERCSUVFAiIhJKKigREQklFZSIiISSCkpEREJJBSUiIqGkghIRkVBSQYmEhJmdYWavx9zvamavBJlJJEgqKJHwWA10NLO86P1xwHCAeBdbFGnoVFAiIeGRSw+sBrqY2XeBjR69VhXwUOxYC8Ept0XSTWczFwmXxUTOCv8DoBdELqUNdDaze4mc72w28LqZdXP3sWb2GJGZ1j7gfuAIIlcq/UEQ/wEiqaKCEgmXxUROVjrJ3cujj20DniRyEs6d7v5w9AJ1K6Lbj3D33WY2hMi1gXYQudilSFZTQYmEyxrgM+CBmMfOJFJGXyNyRnuAM4B5ZnY0X1wY7hxgiLt/lqGsImmlghIJlzuAezxyIboDtgE3A4V8UVxriOzWq4jehsg1gmaY2SYi1+Kam5nIIumhy22IhICZdQReBF5395uCziMSBiooEREJJS0zFxGRUFJBiYhIKKmgREQklFRQIiISSiooEREJJRWUiIiEkgpKRERC6f8D3WMmXhtiLrAAAAAASUVORK5CYII=\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -216,7 +217,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 210,
+   "execution_count": 60,
    "metadata": {},
    "outputs": [
     {
@@ -233,7 +234,7 @@
        "                          validation_fraction=0.1, verbose=0, warm_start=False)"
       ]
      },
-     "execution_count": 210,
+     "execution_count": 60,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -246,7 +247,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 211,
+   "execution_count": 61,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -256,7 +257,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 212,
+   "execution_count": 62,
    "metadata": {},
    "outputs": [
     {
@@ -271,7 +272,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -288,7 +289,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 213,
+   "execution_count": 63,
    "metadata": {},
    "outputs": [
     {
@@ -303,7 +304,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -327,7 +328,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 258,
+   "execution_count": 64,
    "metadata": {},
    "outputs": [
     {
@@ -344,7 +345,7 @@
        "                          validation_fraction=0.1, verbose=0, warm_start=False)"
       ]
      },
-     "execution_count": 258,
+     "execution_count": 64,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -357,7 +358,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 259,
+   "execution_count": 65,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -367,7 +368,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 260,
+   "execution_count": 66,
    "metadata": {},
    "outputs": [
     {
@@ -382,7 +383,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -399,7 +400,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 261,
+   "execution_count": 67,
    "metadata": {},
    "outputs": [
     {
@@ -414,7 +415,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -429,6 +430,493 @@
     "plot_parity(prediction_train, y_train[:,0])"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## GP coregionalized"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import GPy"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 134,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "K = GPy.kern.Matern32(NFEAT) \n",
+    "icm = GPy.util.multioutput.ICM(input_dim=NFEAT,num_outputs=2,kernel=K)\n",
+    "m = GPy.models.GPCoregionalizedRegression([X_train, X_train], \n",
+    "                                                [y_train[:,0].reshape(-1,1), y_train[:,1].reshape(-1,1)], \n",
+    "                                                kernel=icm)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 135,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<paramz.optimization.optimization.opt_lbfgsb at 0x7fd0bed724e0>"
+      ]
+     },
+     "execution_count": 135,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m.optimize()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 83,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import matplotlib as mpl"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 136,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "newX = np.hstack([X_test,0 * np.ones_like(X_test)])\n",
+    "mu_c0, var_c0 =m.predict(newX,Y_metadata={'output_index':0 * np.ones((newX.shape[0],1)).astype(int)})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 137,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "newX = np.hstack([X_test, 1 * np.ones_like(X_test)])\n",
+    "mu_c1, var_c1 =m.predict(newX,Y_metadata={'output_index': 1 * np.ones((newX.shape[0],1)).astype(int)})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 138,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'r2': 0.9808324547037548,\n",
+       " 'mae': 0.02607533434493928,\n",
+       " 'max_error': 0.12448405765620496}"
+      ]
+     },
+     "execution_count": 138,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_metrics(mu_c0, y_test[:,0])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 139,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'r2': 0.9665125395251177,\n",
+       " 'mae': 0.4782843875712748,\n",
+       " 'max_error': 2.366379255778657}"
+      ]
+     },
+     "execution_count": 139,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_metrics(mu_c1, y_test[:,1])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 113,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def plot_parity(y_pred0, y_true0, var0, y_pred1, y_true1, var1, outname=None):\n",
+    "    fig, ax = plt.subplots(1,2)\n",
+    "\n",
+    "\n",
+    "    # now plot both limits against eachother\n",
+    "    ax[0].scatter(y_true0, y_pred0, c=var0, cmap=plt.cm.coolwarm, s=.3)\n",
+    "    ax[1].scatter(y_true1, y_pred1, c=var1, cmap=plt.cm.coolwarm, s=.3)\n",
+    "    \n",
+    "    for a in ax:\n",
+    "        a.spines['left'].set_smart_bounds(True)\n",
+    "        a.spines['bottom'].set_smart_bounds(True)\n",
+    "        a.set_xlabel(r'$y_{true}$')\n",
+    "        lims = [\n",
+    "            np.min([a.get_xlim(), a.get_ylim()]),  # min of both axes\n",
+    "            np.max([a.get_xlim(), a.get_ylim()]),  # max of both axes\n",
+    "        ]\n",
+    "        a.plot(lims, lims, 'k-', alpha=0.75,  zorder=0)\n",
+    "            \n",
+    "    ax[0].set_ylabel(r'$\\hat{y}$')\n",
+    "    fig.tight_layout()\n",
+    "    \n",
+    "    if outname is not None: \n",
+    "        fig.savefig(outname, bbox_inches='tight')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 115,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      " /Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/ipykernel_launcher.py:10: MatplotlibDeprecationWarning:\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n",
+      " /Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/ipykernel_launcher.py:11: MatplotlibDeprecationWarning:\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_parity(mu, y_test[:,0], var, mu2, y_test[:,1], var1, 'test.pdf')"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Compare against simple GP models"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 133,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "m_0 = GPy.models.GPRegression(X_train, y_train[:,0].reshape(-1,1), \n",
+    "                                                kernel=K)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 120,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<paramz.optimization.optimization.opt_lbfgsb at 0x7fd11d6e8198>"
+      ]
+     },
+     "execution_count": 120,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m_0.optimize()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "m_1 = GPy.models.GPRegression(X_train, y_train[:,1].reshape(-1,1), \n",
+    "                                                kernel=K)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 121,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<paramz.optimization.optimization.opt_lbfgsb at 0x7fd0becc5358>"
+      ]
+     },
+     "execution_count": 121,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m_1.optimize()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 127,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "mu1, var1 = m_1.predict(X_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 128,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "mu0, var0 = m_0.predict(X_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 129,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      " /Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/ipykernel_launcher.py:10: MatplotlibDeprecationWarning:\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n",
+      " /Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/ipykernel_launcher.py:11: MatplotlibDeprecationWarning:\n",
+      "The set_smart_bounds function was deprecated in Matplotlib 3.2 and will be removed two minor releases later.\n"
+     ]
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 2 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_parity(mu0, y_test[:,0], var0, mu1, y_test[:,1], var1, 'test.pdf')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 146,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import sys\n",
+    "sys.path.append('..')\n",
+    "from dispersant_screener.utils import get_metrics"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 131,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'r2': 0.9809381191584992,\n",
+       " 'mae': 0.025979655417964324,\n",
+       " 'max_error': 0.1201851222245649}"
+      ]
+     },
+     "execution_count": 131,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_metrics(mu0, y_test[:,0])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 132,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'r2': 0.9526982533077336,\n",
+       " 'mae': 0.5746390319413412,\n",
+       " 'max_error': 3.0826903982358154}"
+      ]
+     },
+     "execution_count": 132,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_metrics(mu1, y_test[:,1])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 145,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def get_variance_descriptors(var):\n",
+    "    return {\n",
+    "        'max_var': np.max(var),\n",
+    "        'min_var': np.min(var),\n",
+    "        'mean_var': np.mean(var),\n",
+    "        'median_var': np.median(var),\n",
+    "        'std_var': np.std(var)\n",
+    "    }"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 147,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'max_var': 0.01163112528151011,\n",
+       " 'min_var': 3.9605432596094945e-08,\n",
+       " 'mean_var': 0.0012168587524108174,\n",
+       " 'median_var': 0.0009197160407817776,\n",
+       " 'std_var': 0.0010276994468042789}"
+      ]
+     },
+     "execution_count": 147,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_variance_descriptors(var0)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 148,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'max_var': 0.011931927501389161,\n",
+       " 'min_var': 9.999718386666245e-09,\n",
+       " 'mean_var': 0.0011813766385759825,\n",
+       " 'median_var': 0.000882590365300473,\n",
+       " 'std_var': 0.0010298224000639302}"
+      ]
+     },
+     "execution_count": 148,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_variance_descriptors(var_c0)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 149,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'max_var': 0.01163105582659596,\n",
+       " 'min_var': 9.999733485822127e-09,\n",
+       " 'mean_var': 0.001216832769678883,\n",
+       " 'median_var': 0.0009196906536181882,\n",
+       " 'std_var': 0.0010276949977108393}"
+      ]
+     },
+     "execution_count": 149,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_variance_descriptors(var1)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 150,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "{'max_var': 1.943465577224908,\n",
+       " 'min_var': 0.3457292451966461,\n",
+       " 'mean_var': 0.5072950786414919,\n",
+       " 'median_var': 0.46615119046884473,\n",
+       " 'std_var': 0.14832893129416594}"
+      ]
+     },
+     "execution_count": 150,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "get_variance_descriptors(var_c1)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 158,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<bound method GP.to_dict of <GPy.models.gp_coregionalized_regression.GPCoregionalizedRegression object at 0x7fd0bf77cdd8>>"
+      ]
+     },
+     "execution_count": 158,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": null,
diff --git a/notebooks/test_package.ipynb b/notebooks/test_package.ipynb
index 0453daa..0257d8e 100644
--- a/notebooks/test_package.ipynb
+++ b/notebooks/test_package.ipynb
@@ -9,73 +9,37 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 61,
+   "execution_count": 30,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "2020-06-17 10:05:47,434 matplotlib.pyplot DEBUG    Loaded backend module://ipykernel.pylab.backend_inline version unknown.\n"
+      "2020-08-07 16:00:55,147 matplotlib.pyplot DEBUG    Loaded backend module://ipykernel.pylab.backend_inline version unknown.\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "The autoreload extension is already loaded. To reload it, use:\n",
+      "  %reload_ext autoreload\n"
      ]
     }
    ],
    "source": [
     "import matplotlib.pyplot as plt \n",
+    "import pandas as pd \n",
+    "import os \n",
+    "import numpy as np \n",
+    "DATADIR = '../data'\n",
     "%matplotlib inline \n",
     "\n",
     "%load_ext autoreload\n",
-    "%autoreload 2"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 62,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "from sklearn.datasets import make_regression"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 185,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "X,y =  make_regression(n_samples=100, n_features=2, n_informative=1, n_targets=1, noise=10)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 186,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<matplotlib.collections.PathCollection at 0x7f8718af4240>"
-      ]
-     },
-     "execution_count": 186,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plt.scatter(X[:,0], y)"
+    "%autoreload 2\n",
+    "\n",
+    "TRAIN_SIZE = 0.01"
    ]
   },
   {
@@ -87,7 +51,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 187,
+   "execution_count": 31,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -96,7 +60,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 188,
+   "execution_count": 32,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -105,28 +69,29 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 337,
+   "execution_count": 33,
    "metadata": {},
    "outputs": [],
    "source": [
     "from dispersant_screener.pal import pal\n",
     "from sklearn.gaussian_process import GaussianProcessRegressor\n",
     "from sklearn.gaussian_process.kernels import RBF, RationalQuadratic, Matern, RationalQuadratic, DotProduct\n",
-    "from sklearn.preprocessing import StandardScaler"
+    "from sklearn.preprocessing import StandardScaler\n",
+    "from sklearn.feature_selection import VarianceThreshold"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 338,
+   "execution_count": 34,
    "metadata": {},
    "outputs": [],
    "source": [
-    "gpr = GaussianProcessRegressor(kernel = RationalQuadratic() + DotProduct(), normalize_y=True, n_restarts_optimizer=10)"
+    "gpr = GaussianProcessRegressor(kernel = RationalQuadratic(), normalize_y=True, n_restarts_optimizer=10)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 339,
+   "execution_count": 35,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -135,436 +100,689 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 340,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "y = y.reshape(-1,1)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 341,
+   "execution_count": 36,
    "metadata": {},
    "outputs": [],
    "source": [
-    "sc = StandardScaler()"
+    "df_full_factorial_feat = pd.read_csv(os.path.join(DATADIR, 'new_features_full_random.csv')).values\n",
+    "a2 = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_virial_large.csv'))['A2_normalized'].values\n",
+    "gibbs = pd.read_csv(os.path.join(DATADIR, 'b1-b21_random_deltaG.csv'))['deltaGmin'].values\n",
+    "rg = pd.read_csv(os.path.join(DATADIR, 'rg_results.csv'))['Rg'].values\n",
+    "y = np.hstack([rg.reshape(-1,1), gibbs.reshape(-1,1)])\n",
+    "assert len(df_full_factorial_feat) == len(a2) == len(gibbs) == len(y)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 342,
+   "execution_count": 37,
    "metadata": {},
    "outputs": [],
    "source": [
-    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.1)"
+    "X_train, X_test, y_train, y_test = train_test_split(df_full_factorial_feat, y, train_size=TRAIN_SIZE)\n",
+    "\n",
+    "vt = VarianceThreshold(0)\n",
+    "X_train = vt.fit_transform(X_train)\n",
+    "X_test = vt.transform(X_test)\n",
+    "\n",
+    "feat_scaler = StandardScaler()\n",
+    "X_train = feat_scaler.fit_transform(X_train)\n",
+    "X_test = feat_scaler.transform(X_test)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 343,
+   "execution_count": 38,
    "metadata": {},
    "outputs": [],
    "source": [
-    "X_train = sc.fit_transform(X_train)\n",
-    "X_test = sc.transform(X_test)"
+    "label_scaler = StandardScaler()\n",
+    "y_train = label_scaler.fit_transform(y_train)\n",
+    "y_test = label_scaler.transform(y_test)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 344,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,826 root         INFO     Starting now the PAL loop\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,837 root         DEBUG    Will use the following settings\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,849 root         DEBUG    epsilon: 0.05, delta: 0.05, iterations: 500\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "2020-06-17 11:46:47,860 root         DEBUG    x_train shape: (10, 2), y_train shape: (10, 1)\n",
-      "\n",
-      "\n",
-      "\n",
-      "  0%|          | 0/500 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,873 root         DEBUG    Starting iteration 1\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "2020-06-17 11:46:47,885 root         DEBUG    Starting modeling step, fitting the GPs\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,171 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,182 root         DEBUG    Scaling parameter beta at the current iteration is 15.986484492710002\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,194 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,205 root         DEBUG    mean array shape: (90, 1), std array shape: (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,217 root         DEBUG    lows shape (90, 1), ups shape (90, 1)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,229 root         DEBUG    rectangle lows shape (90, 1), rectangle ups shape (90, 1)\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,243 root         DEBUG    Upper limit Pareto: [157.00012659]\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "2020-06-17 11:46:48,254 root         INFO     Iteration 1 | Pareto optimal 1, not Pareto optimal 89, unclassified 0, hypervolume: nan\n",
-      "\n",
-      "\n",
-      "\n",
-      "  0%|          | 1/500 [00:00<03:16,  2.53it/s]\u001b[A\u001b[A\u001b[A\n"
+      "2020-08-07 16:43:25,796 root         INFO     Starting now the PAL loop\n",
+      "2020-08-07 16:43:25,798 root         DEBUG    Will use the following settings\n",
+      "2020-08-07 16:43:25,800 root         DEBUG    epsilon: 0.1, delta: 0.05, iterations: 500\n",
+      "2020-08-07 16:43:25,802 root         DEBUG    x_train shape: (31, 31), y_train shape: (31, 2)\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  0%|          | 0/500 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:43:25,813 root         DEBUG    Starting iteration 1\n",
+      "2020-08-07 16:43:25,814 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:43:26,056 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:43:26,363 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:43:26,366 root         DEBUG    Scaling parameter beta at the current iteration is 24.447599575435387\n",
+      "2020-08-07 16:43:26,367 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:43:26,368 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:43:26,369 root         DEBUG    mean array mean: -0.07928718129758847, mean array std: 0.9304289655882717\n",
+      "2020-08-07 16:43:26,371 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:43:26,372 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:44:01,380 root         INFO     Iteration 1 | Pareto optimal 0, not Pareto optimal 13, unclassified 3081, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  0%|          | 1/500 [00:35<4:55:49, 35.57s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:44:01,384 root         DEBUG    Starting iteration 2\n",
+      "2020-08-07 16:44:01,385 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:44:01,581 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:44:01,999 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:44:02,000 root         DEBUG    Scaling parameter beta at the current iteration is 27.22018829767517\n",
+      "2020-08-07 16:44:02,000 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:44:02,001 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:44:02,003 root         DEBUG    mean array mean: -0.10027016396910392, mean array std: 0.9409103538413861\n",
+      "2020-08-07 16:44:02,006 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:44:02,028 root         DEBUG    first low: 0.6151885986606993, first up: 2.9159222253898927\n",
+      "2020-08-07 16:44:02,041 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:44:02,045 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:44:39,382 root         INFO     Iteration 2 | Pareto optimal 0, not Pareto optimal 14, unclassified 3080, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  0%|          | 2/500 [01:13<5:01:16, 36.30s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:44:39,386 root         DEBUG    Starting iteration 3\n",
+      "2020-08-07 16:44:39,386 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:44:39,599 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:44:39,832 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:44:39,833 root         DEBUG    Scaling parameter beta at the current iteration is 28.842048730107823\n",
+      "2020-08-07 16:44:39,834 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:44:39,836 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:44:39,837 root         DEBUG    mean array mean: -0.09320750687034984, mean array std: 0.9486451550727419\n",
+      "2020-08-07 16:44:39,839 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:44:39,854 root         DEBUG    first low: 0.6151885986606993, first up: 2.9159222253898927\n",
+      "2020-08-07 16:44:39,868 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:44:39,872 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:45:13,957 root         INFO     Iteration 3 | Pareto optimal 0, not Pareto optimal 14, unclassified 3080, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  1%|          | 3/500 [01:48<4:56:23, 35.78s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:45:13,960 root         DEBUG    Starting iteration 4\n",
+      "2020-08-07 16:45:13,961 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:45:14,290 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:45:14,532 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:45:14,533 root         DEBUG    Scaling parameter beta at the current iteration is 29.99277701991495\n",
+      "2020-08-07 16:45:14,534 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:45:14,535 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:45:14,535 root         DEBUG    mean array mean: -0.08911138598869753, mean array std: 0.9527862309897636\n",
+      "2020-08-07 16:45:14,537 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:45:14,548 root         DEBUG    first low: 0.6151885986606993, first up: 2.9159222253898927\n",
+      "2020-08-07 16:45:14,560 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:45:14,563 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:45:47,037 root         INFO     Iteration 4 | Pareto optimal 0, not Pareto optimal 177, unclassified 2917, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  1%|          | 4/500 [02:21<4:49:05, 34.97s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:45:47,042 root         DEBUG    Starting iteration 5\n",
+      "2020-08-07 16:45:47,043 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:45:47,425 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:45:47,570 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:45:47,571 root         DEBUG    Scaling parameter beta at the current iteration is 30.88535122517179\n",
+      "2020-08-07 16:45:47,572 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:45:47,574 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:45:47,576 root         DEBUG    mean array mean: -0.09688191172414828, mean array std: 0.9580905733809411\n",
+      "2020-08-07 16:45:47,584 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:45:47,601 root         DEBUG    first low: 0.6151885986606993, first up: 2.9159222253898927\n",
+      "2020-08-07 16:45:47,616 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:45:47,619 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:46:23,707 root         INFO     Iteration 5 | Pareto optimal 0, not Pareto optimal 178, unclassified 2916, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  1%|          | 5/500 [02:57<4:52:43, 35.48s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:46:23,710 root         DEBUG    Starting iteration 6\n",
+      "2020-08-07 16:46:23,711 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:46:24,285 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:46:24,929 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:46:24,931 root         DEBUG    Scaling parameter beta at the current iteration is 31.614637452347605\n",
+      "2020-08-07 16:46:24,932 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:46:24,935 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:46:24,938 root         DEBUG    mean array mean: -0.099240012388621, mean array std: 0.9739326678250761\n",
+      "2020-08-07 16:46:24,940 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:46:24,959 root         DEBUG    first low: 0.6151885986606993, first up: 2.9159222253898927\n",
+      "2020-08-07 16:46:24,974 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:46:24,977 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:47:00,489 root         INFO     Iteration 6 | Pareto optimal 0, not Pareto optimal 179, unclassified 2915, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  1%|          | 6/500 [03:34<4:55:20, 35.87s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:47:00,492 root         DEBUG    Starting iteration 7\n",
+      "2020-08-07 16:47:00,493 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:47:00,713 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:47:01,023 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:47:01,024 root         DEBUG    Scaling parameter beta at the current iteration is 32.23124017165664\n",
+      "2020-08-07 16:47:01,025 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:47:01,026 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:47:01,027 root         DEBUG    mean array mean: -0.10168043273293666, mean array std: 0.977179676731693\n",
+      "2020-08-07 16:47:01,029 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:47:01,041 root         DEBUG    first low: 0.6357238874700357, first up: 2.9159222253898927\n",
+      "2020-08-07 16:47:01,054 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:47:01,057 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:47:34,998 root         INFO     Iteration 7 | Pareto optimal 0, not Pareto optimal 181, unclassified 2913, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  1%|▏         | 7/500 [04:09<4:51:23, 35.46s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:47:35,001 root         DEBUG    Starting iteration 8\n",
+      "2020-08-07 16:47:35,002 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:47:35,363 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:47:35,766 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:47:35,767 root         DEBUG    Scaling parameter beta at the current iteration is 32.76536574215473\n",
+      "2020-08-07 16:47:35,768 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:47:35,769 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:47:35,770 root         DEBUG    mean array mean: -0.10324192978907482, mean array std: 0.9854052181578299\n",
+      "2020-08-07 16:47:35,772 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:47:35,785 root         DEBUG    first low: 0.6357238874700357, first up: 2.9159222253898927\n",
+      "2020-08-07 16:47:35,799 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:47:35,802 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:48:08,394 root         INFO     Iteration 8 | Pareto optimal 0, not Pareto optimal 184, unclassified 2910, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  2%|▏         | 8/500 [04:42<4:45:42, 34.84s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:48:08,396 root         DEBUG    Starting iteration 9\n",
+      "2020-08-07 16:48:08,396 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:48:08,648 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:48:08,869 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:48:08,870 root         DEBUG    Scaling parameter beta at the current iteration is 33.23649788478026\n",
+      "2020-08-07 16:48:08,870 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:48:08,871 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:48:08,873 root         DEBUG    mean array mean: -0.1201203192138844, mean array std: 1.0167260392423763\n",
+      "2020-08-07 16:48:08,874 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:48:08,884 root         DEBUG    first low: 0.6566726113273427, first up: 2.9159222253898927\n",
+      "2020-08-07 16:48:08,896 root         DEBUG    first low: -2.7705437880695274, first up: 1.8301525124215696\n",
+      "2020-08-07 16:48:08,898 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:48:38,030 root         INFO     Iteration 9 | Pareto optimal 0, not Pareto optimal 230, unclassified 2864, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  2%|▏         | 9/500 [05:12<4:32:20, 33.28s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:48:38,032 root         DEBUG    Starting iteration 10\n",
+      "2020-08-07 16:48:38,033 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:48:38,245 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:48:38,439 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:48:38,440 root         DEBUG    Scaling parameter beta at the current iteration is 33.65793994741157\n",
+      "2020-08-07 16:48:38,440 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:48:38,441 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:48:38,442 root         DEBUG    mean array mean: -0.12320390434341089, mean array std: 1.0230910209206294\n",
+      "2020-08-07 16:48:38,444 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:48:38,454 root         DEBUG    first low: 0.6682906761461915, first up: 2.9159222253898927\n",
+      "2020-08-07 16:48:38,465 root         DEBUG    first low: -2.7705437880695274, first up: 1.816625549291612\n",
+      "2020-08-07 16:48:38,468 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:49:07,881 root         INFO     Iteration 10 | Pareto optimal 0, not Pareto optimal 240, unclassified 2854, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  2%|▏         | 10/500 [05:42<4:23:23, 32.25s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:49:07,883 root         DEBUG    Starting iteration 11\n",
+      "2020-08-07 16:49:07,883 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:49:08,073 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:49:08,204 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:49:08,205 root         DEBUG    Scaling parameter beta at the current iteration is 34.039180666628866\n",
+      "2020-08-07 16:49:08,206 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:49:08,207 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:49:08,208 root         DEBUG    mean array mean: -0.12903617090457722, mean array std: 1.0271605911581798\n",
+      "2020-08-07 16:49:08,210 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:49:08,221 root         DEBUG    first low: 0.6943831862109919, first up: 2.9159222253898927\n",
+      "2020-08-07 16:49:08,233 root         DEBUG    first low: -2.7705437880695274, first up: 1.7843285061166416\n",
+      "2020-08-07 16:49:08,236 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:49:45,705 root         INFO     Iteration 11 | Pareto optimal 0, not Pareto optimal 261, unclassified 2833, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  2%|▏         | 11/500 [06:19<4:36:28, 33.92s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:49:45,708 root         DEBUG    Starting iteration 12\n",
+      "2020-08-07 16:49:45,709 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:49:45,947 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:49:46,563 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:49:46,565 root         DEBUG    Scaling parameter beta at the current iteration is 34.38722617458739\n",
+      "2020-08-07 16:49:46,565 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:49:46,567 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:49:46,568 root         DEBUG    mean array mean: -0.1372641339224099, mean array std: 1.0426352423752108\n",
+      "2020-08-07 16:49:46,571 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:49:46,583 root         DEBUG    first low: 0.7051471751966294, first up: 2.9159222253898927\n",
+      "2020-08-07 16:49:46,595 root         DEBUG    first low: -2.7615503712596183, first up: 1.7547648659232395\n",
+      "2020-08-07 16:49:46,598 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:50:22,205 root         INFO     Iteration 12 | Pareto optimal 0, not Pareto optimal 273, unclassified 2821, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  2%|▏         | 12/500 [06:56<4:42:11, 34.70s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:50:22,207 root         DEBUG    Starting iteration 13\n",
+      "2020-08-07 16:50:22,207 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:50:22,397 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:50:22,947 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:50:22,948 root         DEBUG    Scaling parameter beta at the current iteration is 34.707397005281535\n",
+      "2020-08-07 16:50:22,949 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:50:22,950 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:50:22,951 root         DEBUG    mean array mean: -0.14867752651425484, mean array std: 1.0411083406332948\n",
+      "2020-08-07 16:50:22,953 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:50:22,963 root         DEBUG    first low: 0.7504442752743365, first up: 2.9159222253898927\n",
+      "2020-08-07 16:50:22,975 root         DEBUG    first low: -2.696457913740513, first up: 1.7547648659232395\n",
+      "2020-08-07 16:50:22,977 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:50:58,258 root         INFO     Iteration 13 | Pareto optimal 0, not Pareto optimal 278, unclassified 2816, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  3%|▎         | 13/500 [07:32<4:44:55, 35.10s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:50:58,261 root         DEBUG    Starting iteration 14\n",
+      "2020-08-07 16:50:58,262 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:50:58,580 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:50:58,998 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:50:58,999 root         DEBUG    Scaling parameter beta at the current iteration is 35.00382889389642\n",
+      "2020-08-07 16:50:59,000 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:50:59,001 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:50:59,003 root         DEBUG    mean array mean: -0.1569239028817849, mean array std: 1.049179967374488\n",
+      "2020-08-07 16:50:59,005 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:50:59,016 root         DEBUG    first low: 0.8004584772671974, first up: 2.9159222253898927\n",
+      "2020-08-07 16:50:59,029 root         DEBUG    first low: -2.696457913740513, first up: 1.7547648659232395\n",
+      "2020-08-07 16:50:59,032 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:51:33,479 root         INFO     Iteration 14 | Pareto optimal 0, not Pareto optimal 290, unclassified 2804, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  3%|▎         | 14/500 [08:07<4:44:37, 35.14s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:51:33,481 root         DEBUG    Starting iteration 15\n",
+      "2020-08-07 16:51:33,482 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:51:33,844 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:51:34,219 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:51:34,220 root         DEBUG    Scaling parameter beta at the current iteration is 35.279800379844225\n",
+      "2020-08-07 16:51:34,221 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:51:34,223 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:51:34,224 root         DEBUG    mean array mean: -0.15787158146690033, mean array std: 1.0496387802161817\n",
+      "2020-08-07 16:51:34,226 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:51:34,238 root         DEBUG    first low: 0.8167398344379788, first up: 2.9159222253898927\n",
+      "2020-08-07 16:51:34,252 root         DEBUG    first low: -2.696457913740513, first up: 1.7547648659232395\n",
+      "2020-08-07 16:51:34,254 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:52:05,567 root         INFO     Iteration 15 | Pareto optimal 0, not Pareto optimal 303, unclassified 2791, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  3%|▎         | 15/500 [08:39<4:36:38, 34.22s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:52:05,569 root         DEBUG    Starting iteration 16\n",
+      "2020-08-07 16:52:05,570 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:52:05,724 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:52:06,114 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:52:06,115 root         DEBUG    Scaling parameter beta at the current iteration is 35.53795446439451\n",
+      "2020-08-07 16:52:06,115 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:52:06,116 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:52:06,117 root         DEBUG    mean array mean: -0.166963153858916, mean array std: 1.0435792588019226\n",
+      "2020-08-07 16:52:06,119 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:52:06,129 root         DEBUG    first low: 0.8572908275753552, first up: 2.9159222253898927\n",
+      "2020-08-07 16:52:06,140 root         DEBUG    first low: -2.696457913740513, first up: 1.7458343248895827\n",
+      "2020-08-07 16:52:06,142 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:52:34,929 root         INFO     Iteration 16 | Pareto optimal 0, not Pareto optimal 317, unclassified 2777, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  3%|▎         | 16/500 [09:09<4:24:18, 32.76s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:52:34,930 root         DEBUG    Starting iteration 17\n",
+      "2020-08-07 16:52:34,931 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:52:35,072 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:52:35,387 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:52:35,389 root         DEBUG    Scaling parameter beta at the current iteration is 35.78045295166025\n",
+      "2020-08-07 16:52:35,389 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:52:35,391 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:52:35,394 root         DEBUG    mean array mean: -0.1663258187682889, mean array std: 1.0441856816190134\n",
+      "2020-08-07 16:52:35,396 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:52:35,407 root         DEBUG    first low: 0.8572908275753552, first up: 2.898527493848297\n",
+      "2020-08-07 16:52:35,418 root         DEBUG    first low: -2.696457913740513, first up: 1.7458343248895827\n",
+      "2020-08-07 16:52:35,421 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:53:01,775 root         INFO     Iteration 17 | Pareto optimal 0, not Pareto optimal 324, unclassified 2770, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  3%|▎         | 17/500 [09:35<4:09:27, 30.99s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:53:01,777 root         DEBUG    Starting iteration 18\n",
+      "2020-08-07 16:53:01,777 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:53:01,970 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:53:02,210 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:53:02,211 root         DEBUG    Scaling parameter beta at the current iteration is 36.009086607020045\n",
+      "2020-08-07 16:53:02,212 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:53:02,213 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:53:02,214 root         DEBUG    mean array mean: -0.1665132465981515, mean array std: 1.0455444719901916\n",
+      "2020-08-07 16:53:02,216 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:53:02,225 root         DEBUG    first low: 0.8634909734374616, first up: 2.8645152709061232\n",
+      "2020-08-07 16:53:02,236 root         DEBUG    first low: -2.696457913740513, first up: 1.7164603183669818\n",
+      "2020-08-07 16:53:02,238 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:53:37,218 root         INFO     Iteration 18 | Pareto optimal 0, not Pareto optimal 335, unclassified 2759, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  4%|▎         | 18/500 [10:11<4:19:40, 32.33s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:53:37,221 root         DEBUG    Starting iteration 19\n",
+      "2020-08-07 16:53:37,222 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:53:37,683 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:53:38,392 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:53:38,394 root         DEBUG    Scaling parameter beta at the current iteration is 36.225355492101144\n",
+      "2020-08-07 16:53:38,395 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:53:38,397 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:53:38,399 root         DEBUG    mean array mean: -0.16722923322606303, mean array std: 1.047296414254003\n",
+      "2020-08-07 16:53:38,402 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:53:38,415 root         DEBUG    first low: 0.8763738516993931, first up: 2.8464845611034972\n",
+      "2020-08-07 16:53:38,432 root         DEBUG    first low: -2.696457913740513, first up: 1.6803849413701983\n",
+      "2020-08-07 16:53:38,435 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:54:19,887 root         INFO     Iteration 19 | Pareto optimal 0, not Pareto optimal 357, unclassified 2737, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  4%|▍         | 19/500 [10:54<4:44:01, 35.43s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:54:19,889 root         DEBUG    Starting iteration 20\n",
+      "2020-08-07 16:54:19,890 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:54:20,372 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:54:21,281 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:54:21,283 root         DEBUG    Scaling parameter beta at the current iteration is 36.43052866965135\n",
+      "2020-08-07 16:54:21,283 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:54:21,286 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:54:21,290 root         DEBUG    mean array mean: -0.16807359579985204, mean array std: 1.04934463571347\n",
+      "2020-08-07 16:54:21,292 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:54:21,313 root         DEBUG    first low: 0.8981098881651541, first up: 2.825940650197107\n",
+      "2020-08-07 16:54:21,336 root         DEBUG    first low: -2.696457913740513, first up: 1.6519299965626921\n",
+      "2020-08-07 16:54:21,352 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:55:11,088 root         INFO     Iteration 20 | Pareto optimal 0, not Pareto optimal 368, unclassified 2726, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  4%|▍         | 20/500 [11:45<5:21:17, 40.16s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:55:11,092 root         DEBUG    Starting iteration 21\n",
+      "2020-08-07 16:55:11,093 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:55:11,548 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:55:12,230 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:55:12,232 root         DEBUG    Scaling parameter beta at the current iteration is 36.62568932632908\n",
+      "2020-08-07 16:55:12,232 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:55:12,236 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:55:12,242 root         DEBUG    mean array mean: -0.1702413769875456, mean array std: 1.0502148077444706\n",
+      "2020-08-07 16:55:12,249 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:55:12,268 root         DEBUG    first low: 0.9108992784965023, first up: 2.8178683154337163\n",
+      "2020-08-07 16:55:12,286 root         DEBUG    first low: -2.696457913740513, first up: 1.624747262255042\n",
+      "2020-08-07 16:55:12,289 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:55:47,580 root         INFO     Iteration 21 | Pareto optimal 0, not Pareto optimal 458, unclassified 2636, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  4%|▍         | 21/500 [12:21<5:11:49, 39.06s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:55:47,583 root         DEBUG    Starting iteration 22\n",
+      "2020-08-07 16:55:47,584 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:55:47,861 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:55:48,200 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:55:48,201 root         DEBUG    Scaling parameter beta at the current iteration is 36.81176938886865\n",
+      "2020-08-07 16:55:48,202 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:55:48,203 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:55:48,204 root         DEBUG    mean array mean: -0.1721301369399458, mean array std: 1.0522113465724323\n",
+      "2020-08-07 16:55:48,206 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:55:48,217 root         DEBUG    first low: 0.9443658273618137, first up: 2.8098736936255326\n",
+      "2020-08-07 16:55:48,242 root         DEBUG    first low: -2.696457913740513, first up: 1.5964038854755245\n",
+      "2020-08-07 16:55:48,247 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:56:14,545 root         INFO     Iteration 22 | Pareto optimal 0, not Pareto optimal 495, unclassified 2599, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  4%|▍         | 22/500 [12:48<4:42:16, 35.43s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:56:14,547 root         DEBUG    Starting iteration 23\n",
+      "2020-08-07 16:56:14,547 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:56:14,802 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:56:15,035 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:56:15,036 root         DEBUG    Scaling parameter beta at the current iteration is 36.98957643915198\n",
+      "2020-08-07 16:56:15,036 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:56:15,037 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:56:15,039 root         DEBUG    mean array mean: -0.1670046219974516, mean array std: 1.0650506936715693\n",
+      "2020-08-07 16:56:15,040 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:56:15,050 root         DEBUG    first low: 0.971752615416927, first up: 2.8098736936255326\n",
+      "2020-08-07 16:56:15,061 root         DEBUG    first low: -2.696457913740513, first up: 1.5685161309728866\n",
+      "2020-08-07 16:56:15,063 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:56:50,895 root         INFO     Iteration 23 | Pareto optimal 0, not Pareto optimal 529, unclassified 2565, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  5%|▍         | 23/500 [13:25<4:43:52, 35.71s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:56:50,897 root         DEBUG    Starting iteration 24\n",
+      "2020-08-07 16:56:50,898 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "/Users/kevinmaikjablonka/opt/miniconda3/envs/dispersant_basf/lib/python3.7/site-packages/sklearn/gaussian_process/_gpr.py:494: ConvergenceWarning: lbfgs failed to converge (status=2):\n",
+      "ABNORMAL_TERMINATION_IN_LNSRCH.\n",
+      "\n",
+      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
+      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
+      "  _check_optimize_result(\"lbfgs\", opt_res)\n",
+      "2020-08-07 16:56:51,204 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:56:51,520 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:56:51,521 root         DEBUG    Scaling parameter beta at the current iteration is 37.15981489682717\n",
+      "2020-08-07 16:56:51,523 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:56:51,525 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:56:51,538 root         DEBUG    mean array mean: -0.16803919129030542, mean array std: 1.067902712825944\n",
+      "2020-08-07 16:56:51,546 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:56:51,563 root         DEBUG    first low: 1.0251900187756622, first up: 2.8098736936255326\n",
+      "2020-08-07 16:56:51,578 root         DEBUG    first low: -2.696457913740513, first up: 1.5134216870733466\n",
+      "2020-08-07 16:56:51,581 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n",
+      "2020-08-07 16:57:18,343 root         INFO     Iteration 24 | Pareto optimal 0, not Pareto optimal 550, unclassified 2544, hypervolume: nan\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "\n",
+      "  5%|▍         | 24/500 [13:52<4:23:37, 33.23s/it]\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A2020-08-07 16:57:18,345 root         DEBUG    Starting iteration 25\n",
+      "2020-08-07 16:57:18,346 root         DEBUG    Starting modeling step, fitting the GPs\n",
+      "2020-08-07 16:57:18,787 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:57:19,029 root         DEBUG    MAE (train): 0.00, r2 (train): 1.00\n",
+      "2020-08-07 16:57:19,030 root         DEBUG    Scaling parameter beta at the current iteration is 37.32310287490819\n",
+      "2020-08-07 16:57:19,031 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:57:19,032 root         DEBUG    mean array shape: (3094, 2), std array shape: (3094, 2)\n",
+      "2020-08-07 16:57:19,033 root         DEBUG    mean array mean: -0.16750597292064343, mean array std: 1.067929534324295\n",
+      "2020-08-07 16:57:19,035 root         DEBUG    lows shape (3094, 2), ups shape (3094, 2)\n",
+      "2020-08-07 16:57:19,045 root         DEBUG    first low: 1.0302692903580115, first up: 2.791766592467499\n",
+      "2020-08-07 16:57:19,057 root         DEBUG    first low: -2.696457913740513, first up: 1.5134216870733466\n",
+      "2020-08-07 16:57:19,059 root         DEBUG    rectangle lows shape (3094, 2), rectangle ups shape (3094, 2)\n"
      ]
     }
    ],
    "source": [
-    "pareto_optimal, hypervolumes = pal([gpr], X_train, y_train, X_test, y_test, hv_reference=[10])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 345,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "55"
-      ]
-     },
-     "execution_count": 345,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "np.where(np.array(pareto_optimal)==1)[0][0]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 351,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "array([160.8238685])"
-      ]
-     },
-     "execution_count": 351,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "y_test[55]"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 352,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "160.82386849946823"
-      ]
-     },
-     "execution_count": 352,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "np.max(y_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 353,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "GaussianProcessRegressor(alpha=1e-10, copy_X_train=True,\n",
-       "                         kernel=RationalQuadratic(alpha=1, length_scale=1) + DotProduct(sigma_0=1),\n",
-       "                         n_restarts_optimizer=10, normalize_y=True,\n",
-       "                         optimizer='fmin_l_bfgs_b', random_state=None)"
-      ]
-     },
-     "execution_count": 353,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "gpr.fit(X_train, y_train)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 354,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "y_pred = gpr.predict(X_test)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 355,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<matplotlib.collections.PathCollection at 0x7f87185e9390>"
-      ]
-     },
-     "execution_count": 355,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "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\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plt.scatter(y_pred, y_test)"
+    "pareto_optimal, hypervolumes = pal([gpr, gpr], X_train, y_train, X_test, y_test, hv_reference=[5, 5], epsilon=0.1)"
    ]
   },
   {
diff --git a/requirements.txt b/requirements.txt
index 16875c9..3ca5f4c 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,4 +1,3 @@
 scikit-learn==0.23.2
 numpy==1.19.1
 tqdm==4.48.2
-pygmo==2.15.0
